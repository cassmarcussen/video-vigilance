// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.sps.servlets;

import com.google.apphosting.api.DeadlineExceededException;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.gson.Gson;
import com.google.sps.data.Analyze;
import com.google.sps.perspective.attributes.Attribute;
import com.google.sps.perspective.PerspectiveAPI;
import com.google.sps.perspective.PerspectiveAPIBuilder;
import com.google.sps.perspective.response.AnalyzeCommentResponse;
import java.io.*;
import java.text.DecimalFormat; 
import java.util.concurrent.ExecutionException;
import java.util.HashMap;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/** Servlet that returns the effect of a video's audio. */
@WebServlet("/audio-effect")
public class AudioEffectServlet extends HttpServlet {

  @Override
  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
    // Call audio transcription method of Cloud VI API to get speech transcription of video.
    HashMap<String, String> audioResultsTemp = Analyze.transcribeAudio();
    HashMap<String, String> audioResults = new HashMap<String, String>();

    // Set the content type of the response.
    response.setContentType("application/json");

    // If no transcription was generated by VI, do not make Perspective API call.
    if(audioResultsTemp.containsKey("transcription")) {
      String transcription = audioResultsTemp.get("transcription");

      // Get the effect of the transcription using the Perspective API.
      try {
        // Instantiate and build the PerspectiveAPIBuilder with my API key.
        PerspectiveAPI api = new PerspectiveAPIBuilder()
          .setApiKey("AIzaSyCx72YUXfGl2npdgwyY8ZLXLNAc-vgks7w")
          .build();
      
        // Create an AnalyzeCommentRequest for the transcription and store the response.
        ListenableFuture<AnalyzeCommentResponse> future = api.analyze()
          .setComment(transcription)
          .addAttribute(Attribute.ofType(Attribute.TOXICITY))
          .addAttribute(Attribute.ofType(Attribute.INSULT))
          .addAttribute(Attribute.ofType(Attribute.THREAT))
          .addAttribute(Attribute.ofType(Attribute.PROFANITY))
          .addAttribute(Attribute.ofType(Attribute.SEXUALLY_EXPLICIT))
          .addAttribute(Attribute.ofType(Attribute.IDENTITY_ATTACK))
          .postAsync();

        // Get the summary scores for all attributes of the transcription [0, 10].
        AnalyzeCommentResponse commentResponse = future.get();
        audioResults = createAudioEffectResults(commentResponse);
        audioResults.put("transcription", transcription);
        audioResults.put("confidence", audioResultsTemp.get("confidence"));
      } catch (ExecutionException e) {
        audioResults.put("error", "Perspective");
      } catch (InterruptedException ioe) {
        audioResults.put("error", "Perspective");
      } catch (DeadlineExceededException e) {
        audioResults.put("error", "timeout");
      }
    }

    // Return the audio's effect (or errors) as JSON string. 
    // If no transcription was generated in VI API, audioResults will contain a key-value error-error message pair.
    String audioEffectJson = convertToJsonUsingGson(audioResults);
    response.getWriter().println(audioEffectJson);
  }

  /** 
   * Converts audio effect HashMap to JSON string using GSON library.
   */
  private String convertToJsonUsingGson(HashMap<String, String> audioEffect) {
    Gson gson = new Gson();
    String json = gson.toJson(audioEffect);
    return json;
  }

  /**
   * Create a HashMap to return with the summary scores for all attributes.
   */
  private HashMap<String, String> createAudioEffectResults(AnalyzeCommentResponse commentResponse) {
    HashMap<String, String> audioResults = new HashMap<String, String>();

    // Get the summary scores for all attributes [0, 1].
    float toxicityScore = commentResponse.getAttributeSummaryScore(Attribute.TOXICITY);
    float insultScore = commentResponse.getAttributeSummaryScore(Attribute.INSULT);
    float threatScore = commentResponse.getAttributeSummaryScore(Attribute.THREAT);
    float profanityScore = commentResponse.getAttributeSummaryScore(Attribute.PROFANITY);
    float adultScore = commentResponse.getAttributeSummaryScore(Attribute.SEXUALLY_EXPLICIT);
    float identityAttackScore = commentResponse.getAttributeSummaryScore(Attribute.IDENTITY_ATTACK);

    // Add summary scores to HashMap.
    audioResults.put("toxicityScore", transformScores(toxicityScore));
    audioResults.put("insultScore", transformScores(insultScore));
    audioResults.put("threatScore", transformScores(threatScore));
    audioResults.put("profanityScore", transformScores(profanityScore));
    audioResults.put("adultScore", transformScores(adultScore));
    audioResults.put("identityAttackScore", transformScores(identityAttackScore));

    return audioResults;
  }

  /**
   * Transform all summary scores into the desired format and return to be added to HashMap.
   * From float values [0, 1] to String representations of values [0, 10].
   */
  private String transformScores(float score) {
    // Multiply by 10 to get summary scores as [0, 10] for meter representation.
    score = score * 10;

    // Format all scores to only have two decimal places. Parse summary scores into string.
    DecimalFormat df = new DecimalFormat("#.##");
    String scoreString = df.format(score);

    return scoreString;
  }
}